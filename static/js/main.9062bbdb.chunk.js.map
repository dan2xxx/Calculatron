{"version":3,"sources":["Buttons.js","reportWebVitals.js","index.js","App.js"],"names":["Buttons","id","onClick","this","props","ac","value","operators","numbers","decimal","calculate","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","isOperator","operatorBind","newExpression","decimalEvent","firstElementinNumber","Calculator","state","output","currentInput","tempInput","link","showImage","addToInput","bind","addOperator","reset","addDecimal","prevProps","setState","e","target","expression","last","length","test","concat","substring","slice","answer","Math","round","eval","toString","src","alt","className"],"mappings":"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","file":"static/js/main.9062bbdb.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport default class Buttons extends React.Component {\r\n    render() {\r\n  \r\n      \r\n      return (\r\n        <div>\r\n          <button id=\"clear\" onClick={this.props.ac} value=\"\">\r\n            AC\r\n          </button>\r\n          <button id=\"divide\" onClick={this.props.operators} value=\"/\">\r\n            /\r\n          </button>\r\n          <button id=\"multiply\" onClick={this.props.operators} value=\"*\">\r\n            x\r\n          </button>\r\n          <button id=\"seven\" onClick={this.props.numbers} value=\"7\">\r\n            7\r\n          </button>\r\n          <button id=\"eight\" onClick={this.props.numbers} value=\"8\">\r\n            8\r\n          </button>\r\n          <button id=\"nine\" onClick={this.props.numbers} value=\"9\">\r\n            9\r\n          </button>\r\n          <button id=\"subtract\" onClick={this.props.operators} value=\"-\">\r\n            -\r\n          </button>\r\n          <button id=\"four\" onClick={this.props.numbers} value=\"4\">\r\n            4\r\n          </button>\r\n          <button id=\"five\" onClick={this.props.numbers} value=\"5\">\r\n            5\r\n          </button>\r\n          <button id=\"six\" onClick={this.props.numbers} value=\"6\">\r\n            6\r\n          </button>\r\n          <button id=\"add\" onClick={this.props.operators} value=\"+\">\r\n            +\r\n          </button>\r\n          <button id=\"one\" onClick={this.props.numbers} value=\"1\">\r\n            1\r\n          </button>\r\n          <button id=\"two\" onClick={this.props.numbers} value=\"2\">\r\n            2\r\n          </button>\r\n          <button id=\"three\" onClick={this.props.numbers} value=\"3\">\r\n            3\r\n          </button>\r\n          <button id=\"zero\" onClick={this.props.numbers} value=\"0\">\r\n            0\r\n          </button>\r\n          <button id=\"decimal\" onClick={this.props.decimal} value=\".\">\r\n            .\r\n          </button>\r\n          <button id=\"equals\" onClick={this.props.calculate} value=\"=\">\r\n            =\r\n          </button>\r\n        </div>\r\n      )\r\n    }\r\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\"\nimport \"./App.css\"\nimport Buttons from './Buttons'\n\nconst isOperator = /[*/+-]/\n\n\nlet operatorBind = false\nlet newExpression = false\nlet decimalEvent = false\nlet firstElementinNumber = true\n\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      output: \"0\",\n      currentInput: \"\",\n      tempInput: \"\",\n      link:\n        \"https://miro.medium.com/max/380/0*pDrYLvrZrFo6AWAG\",\n      showImage: false\n    }\n\n    this.addToInput = this.addToInput.bind(this)\n    this.addOperator = this.addOperator.bind(this)\n    this.reset = this.reset.bind(this)\n    this.calculate = this.calculate.bind(this)\n    this.addDecimal = this.addDecimal.bind(this)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.state.output !== prevProps.output) {\n      if (this.state.output === \"5051\") {\n        this.setState({\n          showImage: true,\n          output: \"0\"\n        })\n      }\n    }\n  }\n\n  reset(e) {\n    //console.log(e)\n    operatorBind = false\n    decimalEvent = false\n    newExpression = false\n    firstElementinNumber = true\n    this.setState({\n      currentInput: e.target.value,\n      output: \"0\"\n    })\n  }\n\n  addToInput(e) {\n    if (newExpression === false) {\n      //console.log(e.target.value)\n      //console.log(\"Number input\")\n\n      let expression = this.state.currentInput\n      let last = expression.length - 1\n\n      if (\n        //Second 0 ban\n        e.target.value === \"0\" &&\n        expression[expression.length - 1] === \"0\" &&\n        //expression.length == 1\n        firstElementinNumber === true &&\n        decimalEvent === false\n      ) {\n        //window.alert('banned')   // !!!!!!!!!!!!!!!!!!!!!!!!!!\n        this.setState({\n          output: \"0\"\n        })\n      } else {\n        //Usual adding >>>\n        if (\n          firstElementinNumber === false ||\n          isOperator.test(expression[last]) ||\n          expression[last] === \".\"\n        ) {\n          //window.alert('not first el or previous was op or dot ')   // !!!!!!!!!!not first el or previous was op or dot!!!!!!!!!!!!!!!!\n          this.setState({\n            currentInput: this.state.currentInput.concat(e.target.value),\n            output:\n              this.state.output === \"0\" || isOperator.test(this.state.output)\n                ? e.target.value\n                : this.state.output + e.target.value\n          })\n\n          if (isOperator.test(expression[last]) && e.target.value === \"0\") {\n            firstElementinNumber = true\n          } else {\n            firstElementinNumber = false\n          }\n          operatorBind = true\n        } else if (\n          e.target.value !== \"0\" &&\n          this.state.currentInput[this.state.currentInput.length - 1] === \"0\"\n        ) {\n          //window.alert('first element removes 0')  // !!!!!!!!!!!!!!!!!!!!!!!!!!\n          // first element removes 0\n          let expression = this.state.currentInput.substring(\n            0,\n            this.state.currentInput.length - 1\n          )\n          this.setState({\n            currentInput: expression.concat(e.target.value),\n            output:\n              this.state.output === \"0\" || isOperator.test(this.state.output)\n                ? e.target.value\n                : this.state.output + e.target.value\n          })\n\n          operatorBind = true\n          firstElementinNumber = false\n        } else if (firstElementinNumber === true) {\n          //first element\n          this.setState({\n            currentInput: this.state.currentInput.concat(e.target.value),\n            output:\n              this.state.output === \"0\" || isOperator.test(this.state.output)\n                ? e.target.value\n                : this.state.output + e.target.value\n          })\n          operatorBind = true\n          //window.alert('first element',)  // !!!!!!!!!!!!!!!!!!!!!!!!!!\n          if (e.target.value !== \"0\") {\n            firstElementinNumber = false\n          }\n        }\n      }\n    } else {\n      this.setState({\n        //new Expression\n        currentInput: e.target.value,\n        output: e.target.value\n      })\n      newExpression = false\n    }\n  }\n\n  addOperator(e) {\n    if (newExpression === false) {\n      //console.log(e.target.value)\n      //console.log(\"Operator input\")\n      if (operatorBind === true) {\n        this.setState({\n          currentInput: this.state.currentInput.concat(e.target.value),\n          output: e.target.value\n        })\n        operatorBind = false\n        decimalEvent = false\n\n        //console.log(this.state.currentInput)\n      } else {\n        //Second operator:\n        if (e.target.value !== \"-\") {\n          let expression = this.state.currentInput\n          let last = expression.length - 1\n\n          if (expression[last - 1] !== \" \") {\n            expression = expression.substring(0, last)\n            expression = expression.concat(e.target.value)\n            this.setState({\n              currentInput: expression,\n              output: e.target.value\n            })\n            operatorBind = false\n            decimalEvent = false\n          } else {\n            //if there are two \"-\" operator (- -)\n            expression = expression.substring(0, last - 2)\n            expression = expression.concat(e.target.value)\n            this.setState({\n              currentInput: expression,\n              output: e.target.value\n            })\n            operatorBind = false\n            decimalEvent = false\n          }\n        } else {\n          //if 2nd is \"-\"\n          let expression = this.state.currentInput\n          let last = expression.length - 1\n          // First time adding \"-\"\n          if (expression[last - 1] !== \" \") {\n            expression = expression.concat(\" \", e.target.value)\n            this.setState({\n              currentInput: expression,\n              output: e.target.value\n            })\n            operatorBind = false\n            decimalEvent = false\n          }\n\n          // ^^^^^^^^^^^^^^^\n        }\n      }\n    } else {\n      this.setState({\n        currentInput: this.state.output.concat(e.target.value),\n        output: e.target.value\n      })\n      newExpression = false\n      operatorBind = false\n      decimalEvent = false\n    }\n    firstElementinNumber = true\n  }\n\n  addDecimal(e) {\n    //console.log(this.state.currentInput)\n    if (operatorBind === true) {\n      if (decimalEvent === false) {\n        this.setState({\n          currentInput: this.state.currentInput.concat(e.target.value),\n          output: this.state.output + e.target.value\n        })\n        decimalEvent = true\n      }\n    }\n    operatorBind = false\n  }\n\n  calculate() {\n\n\n    if (newExpression === false) {\n      //console.log(\"Calculating...\")\n      let expression = this.state.currentInput\n      //console.log(expression)\n\n      if (operatorBind === false) {\n        expression = expression.slice(0, expression.length - 1)\n      }\n      //console.log(expression)\n\n      let answer = Math.round(10000000 * eval(expression)) / 10000000\n      //console.log(answer)\n\n      this.setState({\n        output: answer.toString(),\n        currentInput:\n          operatorBind === false\n            ? expression.concat(\"=\", answer)\n            : this.state.currentInput.concat(\"=\", answer)\n      })\n      newExpression = true\n    }\n  }\n\n  render() {\n    if (this.state.showImage === true) {\n      return (\n        <div>\n          <h1> ПОПАВСЬ!!! </h1>\n          <img src={this.state.link} alt='link' />\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"calculator\">\n          <h1>Calculatron</h1>\n          <div className=\"displays\">\n            {this.state.currentInput\n              ? <h3 className=\"display_top\">{this.state.currentInput}</h3>\n              : <h3 className=\"display_top\">0</h3>\n            }\n            <h2 className=\"display_bottom\" id=\"display\">\n              {this.state.output}\n            </h2>\n          </div>\n          <Buttons\n            id=\"buttons\"\n            numbers={this.addToInput}\n            operators={this.addOperator}\n            ac={this.reset}\n            calculate={this.calculate}\n            decimal={this.addDecimal}\n          />\n        </div>\n      )\n    }\n  }\n}\n\n\n\nexport default function App() {\n  return (\n    <div>\n      <Calculator />\n    </div>\n  )\n}\n"],"sourceRoot":""}